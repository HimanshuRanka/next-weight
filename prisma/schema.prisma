// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String      @id @default(cuid())
  name               String?
  email              String?     @unique
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  sessions           Session[]
  currentWorkoutPlan WorkoutPlan? @relation(fields: [currentWorkoutPlanId], references: [id])
  currentWorkoutPlanId      Int?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// I have a workout plan
// each plan has multiple days where each day has multiple exercises

// I have logs where for each excercise in each day I log weight and reps and day that I completed it. 

// My logs are only linked to the excercise

// my excercise is linked to the day

// the day is linked to a workout plan

// I can have one active plan, and that is saved in the user table and links to workout plans

model WorkoutPlan {
  id            Int            @id @default(autoincrement())
  name          String
  User          User[]
  workoutPlanExerciseSet WorkoutPlanExerciseSet[]
}

model ExcerciseSet {
  id          Int           @id @default(autoincrement())
  excercises  Excercise[]
  workoutPlanExerciseSet WorkoutPlanExerciseSet[]
}

model WorkoutPlanExerciseSet {
  workoutPlanId Int
  exerciseSetId Int
  order         Int

  workoutPlan WorkoutPlan @relation(fields: [workoutPlanId], references: [id])
  exerciseSet ExcerciseSet  @relation(fields: [exerciseSetId], references: [id])

  @@id([workoutPlanId, exerciseSetId])
  @@unique([workoutPlanId, exerciseSetId, order])
}

model Excercise {
  id           Int            @id @default(autoincrement())
  name         String
  muscleGroups String
  liftLogs     LiftLog[]
  ExcerciseSet ExcerciseSet[]
}

model LiftLog {
  id          Int       @id @default(autoincrement())
  reps        Int
  weight      Float
  comfort     Int
  Notes       String
  excercise   Excercise @relation(fields: [excerciseId], references: [id])
  excerciseId Int
  date        DateTime
}

